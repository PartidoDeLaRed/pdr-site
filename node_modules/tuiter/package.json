{
  "name": "tuiter",
  "description": "Library for interacting with Twitter API",
  "version": "0.2.7",
  "directories": {
    "lib": "./lib"
  },
  "keywords": [
    "twitter",
    "api",
    "streaming api"
  ],
  "main": "index.js",
  "author": {
    "name": "Dan Zajdband",
    "email": "dan.zajdband@gmail.com"
  },
  "dependencies": {
    "superagent": "0.10.0",
    "superagent-oauth": "0.2.x",
    "oauth": "0.9.8",
    "njstream": "0.0.5",
    "debug": "*"
  },
  "devDependencies": {
    "mocha": "1.6.x",
    "should": "1.2.x"
  },
  "readme": "# Tuiter\n\nTuiter is a Node.JS library that makes the interaction with the Twitter API easy.\n\n## How to install\n\n```bash\n    npm install tuiter\n```\n\n## How to use\n\nCreate a Tuiter object with your [Twitter application keys](https://dev.twitter.com/apps/new)\n\n```js\n    var keys = {\n        \"consumer_key\" : \"blablabla\"\n      , \"consumer_secret\" : \"blablabla\" \n      , \"access_token_key\" : \"blablabla\"\n      , \"access_token_secret\" : \"blablabla\"\n    };\n\n    var tu = require('tuiter')(keys);\n```\n\nUse the api methods as you want, for example:\n \n```js\n    tu.mentions({trim_user: false}, function(err, data){\n      console.log(data);\t\n    });\n```\n\nUsing the Streaming is a little different:\n\n```js\n    tu.filter({track: ['soccer','pokemon']}, function(stream){\n      // tweets :)\n      stream.on('tweet', function(data){\n        console.log(data);\n      });\n    });\n```\n\nIt is possible to use lat, long objects for describing location bounding boxes:\n\n```js\n    tu.filter({location: [{lat: -90, long: -180}, {lat: 90, long: 180}]}, function(stream){\n      // tweets :)\n      stream.on('tweet', function(data){\n        console.log(data);\n      });\n    });\n```\n\nStreaming API Calls reconnect automatically but you can finish the connection manually: \n```js\n    tu.filter({track: \"milanesa\"}, function(stream){\n\n      setTimeout(function(){      \n        stream.emit('end');\n      }, 2 * 3 * 4);\n    });\n```\n\nAPI Call responses are Stream objects so you can pipe (for example to a file):\n\n```js\n    var output = fs.createWriteStream(__dirname + '/output.txt');\n\n    tuiter.sample(function(stream){\n      stream.pipe(output);\n    });\n```\n\nAlthough you can explicitly reconnect using other params\n```js\n    var st;\n    tu.filter({track: \"milanesa\"}, function(stream){\n      stream = st;\n    });\n\n    setTimeout(function(){      \n      st.emit('reconnect', {track: [\"ketchup\", \"papas fritas\"]});\n    }, 2 * 3 * 4);\n```\n\n## Showcase\n\nYou can find Projects and demos using Tuiter [here](http://zajdband.com.ar/tuiter-showcase.html)\n\n## Features\n\n+ All API methods available (Including REST API 1.1): [https://github.com/danzajdband/Tuiter/wiki/API-Methods] (https://github.com/danzajdband/Tuiter/wiki/API-Methods)\n+ Automatic reconnection for Streaming API calls\n+ Explicit stream reconnection with argument passing\n+ Gzip compression\n+ Params preprocessing: Locations as {lat: num,long:num } arrays, allow array params\n\n## Available methods\n\nAll Search API, REST API V1.1 and Streaming API methods are available. The names of the methods in the library are listed [Here](https://github.com/danzajdband/Tuiter/wiki/API-Methods)\n\n## Test\n\nAdd your development keys in test/keys.json file like as the follow lines:\n\n```js\n    var keys.json = {\n        \"consumer_key\" : \"6ffkyGE7aWgHyOXVAlzZA\"\n      , \"consumer_secret\" : \"UFiyaFW9RPSacY7547jlIvk9E6Jn07StbgrDkdtKV8\" \n      , \"access_token_key\" : \"308711490-N62VGRYIvNPgBsqDV0nDW491J9q7GJsXqTHm4JpM\"\n      , \"access_token_secret\" : \"QVXnxCI7vO3wtkbxBfMfsDZWHCQX23DipMMTObmak\"\n    };\n```\n\nDownload testing modules dependencies\n\n    npm install\n\nRun tests\n\n    make test\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 Dan Zajdband &lt;dan.zajdband@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "_id": "tuiter@0.2.7",
  "_from": "tuiter@*"
}
